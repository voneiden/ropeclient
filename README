0.0 Development notes
If you want to try this program, please use 
https://github.com/voneiden/ropeclient/tree/0.B-RC1

The master branch is under massive clean up and redesign and probably not working.

1.0 Development plan (as of April 27th 2011)

Slowly but surely I'm reworking the whole idea. When I first created ropeclient, it
was programmed as ideas came, with little flexibility in mind. It served its purpose
well but in general I didn't like how the code looked and the poor structure it had.

Thus I started multiple rewrites. I lost track how many rewrites I've started, though
that's probably visible on the github commit history. Currently the system features a
few notable things

Client side
- Server can request to enable and disable custom modules. This allows easy development of
custom servers without having to rewrite any original client source code.

Server side
- All functions are nicely sorted into modules. Currently there are modules for things like loggin in and protocol.
- There's a good event system, which allows modules to communicate with each others.


2.0 Installation
Ropeclient runs on any nix system that has python 2.x and the following 
dependencies installed:
- Tkinter          Ships with python.
- Twisted          http://twistedmatrix.com/trac/
-- zope.interfaces http://pypi.python.org/pypi/zope.interface#download

The win32 builds ship with all the dependencies and python included in 
one convinient (usage wise.. not size wise) package.

3.0 Contact
Primary means of contact either through Github or the mailing list 
ropeclient@googlegroups.com. To subscribe to the mailing list, send an 
email to ropeclient+subscribe@googlegroups.com. The mailing list may be 
used for anykind of ropeclient related discussion, from ideas to issues.


4.0 Protocol specification
The protocol is in the most recent version relatively simple. The bulk 
of the data exchanged between the server and the client is made of msg packets.

Client to server: msg body
Server to client: msg timestamp owner body

Body is the message payload, timestamp is the message ID and time when it was created.
Originally this message ID was created to allow editing of previous messages in a Skype
like fashion. Finally the owner is the owner of the message, to help the client figure
what it's able to edit and what not.

Other packets include the "pwd" packet which when sent by the server to client toggles
the password mode - the core entry box will display stars instead of characters and all
sent messages will be hashed.

4.3 People wanting to play though other protocols.

There were plans, but I'm not working on anything like that at the moment. In theory
it should be relatively possible through the modularity of the server.


